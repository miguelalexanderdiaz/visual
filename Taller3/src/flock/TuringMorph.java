package flock;

import java.awt.Color;

import javax.swing.JFrame;

public class TuringMorph {
	private static final int MAXIMUM_SYSTEM_SIZE = 350;
	private static final double[] PRESET_CONSTANTS = new double[] { 3.5d, 16d, 1.6d, 6d, 0.1d, 1d,
			1d, 16d, 2.6d, 24d, 1d, 3d, };
			
	/**
	 * This method is called from within the init() method to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	public void initComponents() {
		JFrame f = new JFrame();
		
		visualizer = new TuringSystemVisualizer(MAXIMUM_SYSTEM_SIZE, MAXIMUM_SYSTEM_SIZE);
		f.add(visualizer);
		f.setSize(800, 600);
		f.setVisible(true);
		solver = new TuringSystemSolver(new TuringSystemSolver.ResultListener() {
			
			@Override
			public void solverResultEvent(int iteration, double[][] result) {
				visualizer.updateImage(result, baseSize, baseSize);
			}
		}, baseSize, baseSize);
	}
	
	public TuringSystemVisualizer getVisualizer() {
		return visualizer;
	}
	
	public void okButtonActionPerformed(int iterations, double ca, double cb) {// GEN-FIRST:event_okButtonActionPerformed
		iterations = 2000;// iterationsSlider.getValue();
		randomColour();
		// progressBar.setMaximum(iterations);
		CA = PRESET_CONSTANTS[2];
		CB = PRESET_CONSTANTS[3];
		
		solver.solve(iterations, CA, CB);
	}
	
	private void randomColour() {
		float hue = (float) Math.random();
		float sat = (float) Math.random();
		float bri = (float) Math.random() * 0.667f;
		Color min = new Color(Color.HSBtoRGB(hue, sat, bri));
		
		hue += ((float) Math.random() * 26f) / 180f;
		bri = 0.75f + ((float) Math.random() / 4f);
		Color max = new Color(Color.HSBtoRGB(hue, sat, bri));
		
		if (Math.random() >= 0.5f) {
			Color temp = min;
			min = max;
			max = temp;
		}
		
		visualizer.setColors(min, max);
	}
	
	private TuringSystemSolver solver;
	private int baseSize = 256;
	private int iterations = 2000;
	private double CA = 3.5d, CB = 16d;
	private TuringSystemVisualizer visualizer;
	
}
